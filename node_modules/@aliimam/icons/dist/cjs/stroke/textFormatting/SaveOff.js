"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaveOff = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = __importStar(require("react"));
exports.SaveOff = React.forwardRef(function SaveOff({ color = "currentColor", fill, size = 24, strokeWidth, strokeLinecap, strokeLinejoin, strokeDasharray, opacity, className, type = "stroke", ...props }, forwardedRef) {
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsxs)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: [(0, jsx_runtime_1.jsxs)("g", { stroke: color, clipPath: "url(#undefined-clip0_85_7199)", strokeLinecap: "round", strokeLinejoin: "round", children: [(0, jsx_runtime_1.jsx)("path", { d: "M13 13H8C7.735 13 7.48 13.105 7.293 13.293 7.105 13.48 7 13.735 7 14V21M14 8H15M17 21V17M2 2 22 22" }), (0, jsx_runtime_1.jsx)("path", { d: "M20.41 20.41C20.037 20.786 19.53 20.998 19 21H5C4.47 21 3.961 20.789 3.586 20.414 3.211 20.039 3 19.531 3 19V5C3.002 4.47 3.214 3.963 3.59 3.59M9 3H15.2C15.728 3.008 16.231 3.223 16.6 3.6L20.4 7.4C20.777 7.769 20.993 8.272 21 8.8V15" })] }), (0, jsx_runtime_1.jsx)("defs", { children: (0, jsx_runtime_1.jsx)("clipPath", { id: "undefined-clip0_85_7199", children: (0, jsx_runtime_1.jsx)("path", { fill: "#fff", d: "M0 0H24V24H0z" }) }) })] }));
    }
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsxs)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: [(0, jsx_runtime_1.jsxs)("g", { stroke: color, clipPath: "url(#undefined-clip0_80_10724)", strokeLinecap: "round", strokeLinejoin: "round", children: [(0, jsx_runtime_1.jsx)("path", { d: "M13 13H8C7.735 13 7.48 13.105 7.293 13.293 7.105 13.48 7 13.735 7 14V21M14 8H15M17 21V17M2 2 22 22" }), (0, jsx_runtime_1.jsx)("path", { d: "M20.41 20.41C20.037 20.786 19.53 20.998 19 21H5C4.47 21 3.961 20.789 3.586 20.414 3.211 20.039 3 19.53 3 19V5C3.002 4.47 3.214 3.963 3.59 3.59M9 3H15.2C15.728 3.008 16.231 3.223 16.6 3.6L20.4 7.4C20.777 7.769 20.993 8.272 21 8.8V15" })] }), (0, jsx_runtime_1.jsx)("defs", { children: (0, jsx_runtime_1.jsx)("clipPath", { id: "undefined-clip0_80_10724", children: (0, jsx_runtime_1.jsx)("path", { fill: "#fff", d: "M0 0H24V24H0z" }) }) })] }));
    }
    console.error(`SaveOff doesn't support ${type}`);
    return null;
});
exports.SaveOff.displayName = "SaveOff";
exports.SaveOff.metadata = {
    name: "SaveOff",
    category: "stroke/textFormatting",
    tags: ["save", "off", "icon"],
    description: "SaveOff icon from stroke/textFormatting category",
    type: ["stroke", "icon"],
};
exports.default = exports.SaveOff;
