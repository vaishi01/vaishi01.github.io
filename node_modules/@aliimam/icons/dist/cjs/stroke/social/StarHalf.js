"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.StarHalf = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = __importStar(require("react"));
exports.StarHalf = React.forwardRef(function StarHalf({ color = "currentColor", fill, size = 24, strokeWidth, strokeLinecap, strokeLinejoin, strokeDasharray, opacity, className, type = "stroke", ...props }, forwardedRef) {
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsx)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: (0, jsx_runtime_1.jsx)("path", { d: "M12.0001 18.338C11.6561 18.3373 11.3171 18.4211 11.0131 18.582L6.39609 21.01C6.30842 21.0564 6.20949 21.0773 6.11054 21.0703C6.0116 21.0632 5.91661 21.0286 5.83639 20.9702C5.75616 20.9119 5.69392 20.8322 5.65675 20.7402C5.61957 20.6483 5.60895 20.5477 5.62609 20.45L6.50709 15.311C6.56546 14.9717 6.54033 14.6233 6.43388 14.296C6.32742 13.9686 6.14284 13.6721 5.89609 13.432L2.16009 9.795C2.08868 9.72603 2.03808 9.6384 2.01405 9.54207C1.99002 9.44575 1.99353 9.34462 2.02417 9.25019C2.05481 9.15576 2.11136 9.07184 2.18737 9.00798C2.26338 8.94412 2.35579 8.9029 2.45409 8.889L7.61909 8.134C7.9594 8.08466 8.28261 7.95329 8.56083 7.7512C8.83905 7.54911 9.06393 7.28237 9.21609 6.974L11.5251 2.295C11.5689 2.20644 11.6366 2.13189 11.7205 2.07976C11.8045 2.02764 11.9013 2.00001 12.0001 2", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }) }));
    }
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsx)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: (0, jsx_runtime_1.jsx)("path", { d: "M12.0001 18.338C11.6561 18.3373 11.3171 18.4211 11.0131 18.582L6.39609 21.01C6.30842 21.0564 6.20949 21.0773 6.11054 21.0703C6.0116 21.0632 5.91661 21.0286 5.83639 20.9702C5.75616 20.9119 5.69392 20.8322 5.65675 20.7402C5.61957 20.6483 5.60895 20.5477 5.62609 20.45L6.50709 15.311C6.56546 14.9717 6.54033 14.6233 6.43388 14.296C6.32742 13.9686 6.14284 13.6721 5.89609 13.432L2.16009 9.795C2.08868 9.72603 2.03808 9.6384 2.01405 9.54207C1.99002 9.44575 1.99353 9.34462 2.02417 9.25019C2.05481 9.15576 2.11136 9.07184 2.18737 9.00798C2.26338 8.94412 2.35579 8.9029 2.45409 8.889L7.61909 8.134C7.9594 8.08466 8.28261 7.95329 8.56083 7.7512C8.83905 7.54911 9.06393 7.28237 9.21609 6.974L11.5251 2.295C11.5689 2.20644 11.6366 2.13189 11.7205 2.07976C11.8045 2.02764 11.9013 2.00001 12.0001 2", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }) }));
    }
    console.error(`StarHalf doesn't support ${type}`);
    return null;
});
exports.StarHalf.displayName = "StarHalf";
exports.StarHalf.metadata = {
    name: "StarHalf",
    category: "stroke/social",
    tags: ["star", "half", "icon"],
    description: "StarHalf icon from stroke/social category",
    type: ["stroke", "icon"],
};
exports.default = exports.StarHalf;
