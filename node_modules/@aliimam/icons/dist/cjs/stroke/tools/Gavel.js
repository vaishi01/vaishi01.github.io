"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Gavel = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = __importStar(require("react"));
exports.Gavel = React.forwardRef(function Gavel({ color = "currentColor", fill, size = 24, strokeWidth, strokeLinecap, strokeLinejoin, strokeDasharray, opacity, className, type = "stroke", ...props }, forwardedRef) {
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsx)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: (0, jsx_runtime_1.jsx)("path", { d: "M14 13 5.619 21.38C5.422 21.577 5.188 21.733 4.931 21.84 4.673 21.947 4.397 22.002 4.119 22.002 3.556 22.002 3.016 21.778 2.618 21.381 2.22 20.983 1.997 20.443 1.997 19.88 1.996 19.318 2.22 18.778 2.618 18.38L11.002 9.999M16 16 22 10M21.5 10.5 13.5 2.5M8 8 14 2M8.5 7.5 16.5 15.5", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }) }));
    }
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsx)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: (0, jsx_runtime_1.jsx)("path", { d: "M14 13 5.619 21.38C5.422 21.577 5.188 21.733 4.931 21.84 4.673 21.947 4.397 22.002 4.119 22.002 3.556 22.002 3.016 21.778 2.619 21.381 2.221 20.983 1.997 20.443 1.997 19.88 1.997 19.318 2.22 18.778 2.618 18.38L11.002 9.999M16 16 22 10M21.5 10.5 13.5 2.5M8 8 14 2M8.5 7.5 16.5 15.5", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }) }));
    }
    console.error(`Gavel doesn't support ${type}`);
    return null;
});
exports.Gavel.displayName = "Gavel";
exports.Gavel.metadata = {
    name: "Gavel",
    category: "stroke/tools",
    tags: ["gavel", "icon"],
    description: "Gavel icon from stroke/tools category",
    type: ["stroke", "icon"],
};
exports.default = exports.Gavel;
