"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudUpload = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = __importStar(require("react"));
exports.CloudUpload = React.forwardRef(function CloudUpload({ color = "currentColor", fill, size = 24, strokeWidth, strokeLinecap, strokeLinejoin, strokeDasharray, opacity, className, type = "stroke", ...props }, forwardedRef) {
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsxs)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: [(0, jsx_runtime_1.jsx)("path", { d: "M12 13V21M4 14.899C3.257 14.14 2.697 13.222 2.361 12.214 2.026 11.206 1.924 10.135 2.063 9.082 2.203 8.029 2.58 7.022 3.167 6.137 3.754 5.251 4.534 4.511 5.449 3.972 6.364 3.432 7.39 3.109 8.449 3.025 9.508 2.941 10.572 3.099 11.561 3.487 12.55 3.875 13.437 4.483 14.156 5.265 14.875 6.047 15.406 6.982 15.71 8H17.5C18.466 8 19.406 8.31 20.181 8.885 20.957 9.461 21.527 10.27 21.807 11.194 22.087 12.118 22.063 13.107 21.737 14.016 21.412 14.925 20.803 15.706 20 16.242", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }), (0, jsx_runtime_1.jsx)("path", { d: "M8 17L12 13L16 17", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" })] }));
    }
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsxs)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: [(0, jsx_runtime_1.jsx)("path", { d: "M12 13V21M4 14.899C3.257 14.14 2.697 13.222 2.361 12.214 2.025 11.206 1.924 10.135 2.063 9.082 2.203 8.029 2.58 7.022 3.167 6.137 3.754 5.251 4.534 4.511 5.449 3.972 6.364 3.432 7.39 3.109 8.449 3.025 9.508 2.941 10.572 3.099 11.561 3.487 12.549 3.875 13.437 4.483 14.156 5.265 14.875 6.047 15.406 6.982 15.71 8H17.5C18.466 8 19.405 8.31 20.181 8.885 20.957 9.461 21.527 10.27 21.807 11.194 22.087 12.118 22.063 13.107 21.737 14.016 21.412 14.925 20.803 15.706 20 16.242", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }), (0, jsx_runtime_1.jsx)("path", { d: "M8 17L12 13L16 17", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" })] }));
    }
    console.error(`CloudUpload doesn't support ${type}`);
    return null;
});
exports.CloudUpload.displayName = "CloudUpload";
exports.CloudUpload.metadata = {
    name: "CloudUpload",
    category: "stroke/files",
    tags: ["cloud", "upload", "icon"],
    description: "CloudUpload icon from stroke/files category",
    type: ["stroke", "icon"],
};
exports.default = exports.CloudUpload;
