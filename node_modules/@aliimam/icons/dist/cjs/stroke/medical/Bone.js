"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bone = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = __importStar(require("react"));
exports.Bone = React.forwardRef(function Bone({ color = "currentColor", fill, size = 24, strokeWidth, strokeLinecap, strokeLinejoin, strokeDasharray, opacity, className, type = "stroke", ...props }, forwardedRef) {
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsx)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: (0, jsx_runtime_1.jsx)("path", { d: "M17 10C17.7 9.3 18.69 10 19.5 10C20.163 10 20.7989 9.73661 21.2678 9.26777C21.7366 8.79893 22 8.16304 22 7.5C22 6.83696 21.7366 6.20107 21.2678 5.73223C20.7989 5.26339 20.163 5 19.5 5C19.3674 5 19.2402 4.94732 19.1464 4.85355C19.0527 4.75979 19 4.63261 19 4.5C19 3.83696 18.7366 3.20107 18.2678 2.73223C17.7989 2.26339 17.163 2 16.5 2C15.837 2 15.2011 2.26339 14.7322 2.73223C14.2634 3.20107 14 3.83696 14 4.5C14 5.31 14.7 6.3 14 7L7 14C6.3 14.7 5.31 14 4.5 14C3.83696 14 3.20107 14.2634 2.73223 14.7322C2.26339 15.2011 2 15.837 2 16.5C2 17.163 2.26339 17.7989 2.73223 18.2678C3.20107 18.7366 3.83696 19 4.5 19C4.78 19 5 19.22 5 19.5C5 20.163 5.26339 20.7989 5.73223 21.2678C6.20107 21.7366 6.83696 22 7.5 22C8.16304 22 8.79893 21.7366 9.26777 21.2678C9.73661 20.7989 10 20.163 10 19.5C10 18.69 9.3 17.7 10 17L17 10Z", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }) }));
    }
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsx)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: (0, jsx_runtime_1.jsx)("path", { d: "M17 10C17.7 9.3 18.69 10 19.5 10C20.163 10 20.7989 9.73661 21.2678 9.26777C21.7366 8.79893 22 8.16304 22 7.5C22 6.83696 21.7366 6.20107 21.2678 5.73223C20.7989 5.26339 20.163 5 19.5 5C19.3674 5 19.2402 4.94732 19.1464 4.85355C19.0527 4.75979 19 4.63261 19 4.5C19 3.83696 18.7366 3.20107 18.2678 2.73223C17.7989 2.26339 17.163 2 16.5 2C15.837 2 15.2011 2.26339 14.7322 2.73223C14.2634 3.20107 14 3.83696 14 4.5C14 5.31 14.7 6.3 14 7L7 14C6.3 14.7 5.31 14 4.5 14C3.83696 14 3.20107 14.2634 2.73223 14.7322C2.26339 15.2011 2 15.837 2 16.5C2 17.163 2.26339 17.7989 2.73223 18.2678C3.20107 18.7366 3.83696 19 4.5 19C4.78 19 5 19.22 5 19.5C5 20.163 5.26339 20.7989 5.73223 21.2678C6.20107 21.7366 6.83696 22 7.5 22C8.16304 22 8.79893 21.7366 9.26777 21.2678C9.73661 20.7989 10 20.163 10 19.5C10 18.69 9.3 17.7 10 17L17 10Z", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }) }));
    }
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsx)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: (0, jsx_runtime_1.jsx)("path", { d: "M17 10C17.7 9.3 18.69 10 19.5 10C20.163 10 20.7989 9.73661 21.2678 9.26777C21.7366 8.79893 22 8.16304 22 7.5C22 6.83696 21.7366 6.20107 21.2678 5.73223C20.7989 5.26339 20.163 5 19.5 5C19.3674 5 19.2402 4.94732 19.1464 4.85355C19.0527 4.75979 19 4.63261 19 4.5C19 3.83696 18.7366 3.20107 18.2678 2.73223C17.7989 2.26339 17.163 2 16.5 2C15.837 2 15.2011 2.26339 14.7322 2.73223C14.2634 3.20107 14 3.83696 14 4.5C14 5.31 14.7 6.3 14 7L7 14C6.3 14.7 5.31 14 4.5 14C3.83696 14 3.20107 14.2634 2.73223 14.7322C2.26339 15.2011 2 15.837 2 16.5C2 17.163 2.26339 17.7989 2.73223 18.2678C3.20107 18.7366 3.83696 19 4.5 19C4.78 19 5 19.22 5 19.5C5 20.163 5.26339 20.7989 5.73223 21.2678C6.20107 21.7366 6.83696 22 7.5 22C8.16304 22 8.79893 21.7366 9.26777 21.2678C9.73661 20.7989 10 20.163 10 19.5C10 18.69 9.3 17.7 10 17L17 10Z", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }) }));
    }
    console.error(`Bone doesn't support ${type}`);
    return null;
});
exports.Bone.displayName = "Bone";
exports.Bone.metadata = {
    name: "Bone",
    category: "stroke/medical",
    tags: ["bone", "icon"],
    description: "Bone icon from stroke/medical category",
    type: ["stroke", "icon"],
};
exports.default = exports.Bone;
