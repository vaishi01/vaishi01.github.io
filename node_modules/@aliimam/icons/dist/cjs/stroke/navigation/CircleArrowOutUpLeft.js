"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CircleArrowOutUpLeft = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = __importStar(require("react"));
exports.CircleArrowOutUpLeft = React.forwardRef(function CircleArrowOutUpLeft({ color = "currentColor", fill, size = 24, strokeWidth, strokeLinecap, strokeLinejoin, strokeDasharray, opacity, className, type = "stroke", ...props }, forwardedRef) {
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsx)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: (0, jsx_runtime_1.jsx)("path", { d: "M2 8V2H8M2 2 12 12M12 2C13.978 2 15.911 2.586 17.556 3.685 19.2 4.784 20.482 6.346 21.239 8.173 21.996 10 22.194 12.011 21.808 13.951 21.422 15.891 20.47 17.673 19.071 19.071 17.673 20.47 15.891 21.422 13.951 21.808 12.011 22.194 10 21.996 8.173 21.239 6.346 20.482 4.784 19.2 3.685 17.556 2.586 15.911 2 13.978 2 12", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }) }));
    }
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsx)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: (0, jsx_runtime_1.jsx)("path", { d: "M2 8V2H8M2 2 12 12M12 2C13.978 2 15.911 2.586 17.556 3.685 19.2 4.784 20.482 6.346 21.239 8.173 21.996 10 22.194 12.011 21.808 13.951 21.422 15.891 20.47 17.673 19.071 19.071 17.673 20.47 15.891 21.422 13.951 21.808 12.011 22.194 10 21.996 8.173 21.239 6.346 20.482 4.784 19.2 3.685 17.556 2.586 15.911 2 13.978 2 12", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }) }));
    }
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsx)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: (0, jsx_runtime_1.jsx)("path", { d: "M2 8V2H8M2 2 12 12M12 2C13.978 2 15.911 2.586 17.556 3.685 19.2 4.784 20.482 6.346 21.239 8.173 21.996 10 22.194 12.011 21.808 13.951 21.422 15.891 20.47 17.673 19.071 19.071 17.673 20.47 15.891 21.422 13.951 21.808 12.011 22.194 10 21.996 8.173 21.239 6.346 20.482 4.784 19.2 3.685 17.556 2.586 15.911 2 13.978 2 12", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }) }));
    }
    console.error(`CircleArrowOutUpLeft doesn't support ${type}`);
    return null;
});
exports.CircleArrowOutUpLeft.displayName = "CircleArrowOutUpLeft";
exports.CircleArrowOutUpLeft.metadata = {
    name: "CircleArrowOutUpLeft",
    category: "stroke/navigation",
    tags: ["circle", "arrow", "out", "up", "left", "icon"],
    description: "CircleArrowOutUpLeft icon from stroke/navigation category",
    type: ["stroke", "icon"],
};
exports.default = exports.CircleArrowOutUpLeft;
