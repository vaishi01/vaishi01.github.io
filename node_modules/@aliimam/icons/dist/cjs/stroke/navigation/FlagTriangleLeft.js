"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlagTriangleLeft = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = __importStar(require("react"));
exports.FlagTriangleLeft = React.forwardRef(function FlagTriangleLeft({ color = "currentColor", fill, size = 24, strokeWidth, strokeLinecap, strokeLinejoin, strokeDasharray, opacity, className, type = "stroke", ...props }, forwardedRef) {
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsx)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: (0, jsx_runtime_1.jsx)("path", { d: "M18.0001 22V2.79997C18.0002 2.66238 17.9648 2.52709 17.8974 2.40716C17.8299 2.28723 17.7327 2.18672 17.6151 2.11535C17.4975 2.04397 17.3634 2.00413 17.2259 1.99969C17.0884 1.99524 16.9521 2.02634 16.8301 2.08997L5.45007 7.77997C5.31481 7.84548 5.20074 7.94776 5.12093 8.0751C5.04111 8.20244 4.99878 8.34969 4.99878 8.49997C4.99878 8.65026 5.04111 8.7975 5.12093 8.92484C5.20074 9.05218 5.31481 9.15446 5.45007 9.21997L18.0001 15.5", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }) }));
    }
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsx)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: (0, jsx_runtime_1.jsx)("path", { d: "M18.0001 22V2.79997C18.0002 2.66238 17.9648 2.52709 17.8974 2.40716C17.8299 2.28723 17.7327 2.18672 17.6151 2.11535C17.4975 2.04397 17.3634 2.00413 17.2259 1.99969C17.0884 1.99524 16.9521 2.02634 16.8301 2.08997L5.45007 7.77997C5.31481 7.84548 5.20074 7.94776 5.12093 8.0751C5.04111 8.20244 4.99878 8.34969 4.99878 8.49997C4.99878 8.65026 5.04111 8.7975 5.12093 8.92484C5.20074 9.05218 5.31481 9.15446 5.45007 9.21997L18.0001 15.5", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }) }));
    }
    console.error(`FlagTriangleLeft doesn't support ${type}`);
    return null;
});
exports.FlagTriangleLeft.displayName = "FlagTriangleLeft";
exports.FlagTriangleLeft.metadata = {
    name: "FlagTriangleLeft",
    category: "stroke/navigation",
    tags: ["flag", "triangle", "left", "icon"],
    description: "FlagTriangleLeft icon from stroke/navigation category",
    type: ["stroke", "icon"],
};
exports.default = exports.FlagTriangleLeft;
