"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Gpu = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = __importStar(require("react"));
exports.Gpu = React.forwardRef(function Gpu({ color = "currentColor", fill, size = 24, strokeWidth, strokeLinecap, strokeLinejoin, strokeDasharray, opacity, className, type = "stroke", ...props }, forwardedRef) {
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsxs)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: [(0, jsx_runtime_1.jsx)("path", { d: "M2 21V3M2 5H20C20.53 5 21.039 5.211 21.414 5.586 21.789 5.961 22 6.47 22 7V15C22 15.53 21.789 16.039 21.414 16.414 21.039 16.789 20.53 17 20 17H2.26M7 17V20C7 20.265 7.105 20.52 7.293 20.707 7.48 20.895 7.735 21 8 21H13C13.265 21 13.52 20.895 13.707 20.707 13.895 20.52 14 20.265 14 20V17", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }), (0, jsx_runtime_1.jsx)("path", { d: "M16 13C17.105 13 18 12.105 18 11 18 9.895 17.105 9 16 9 14.895 9 14 9.895 14 11 14 12.105 14.895 13 16 13ZM8 13C9.105 13 10 12.105 10 11 10 9.895 9.105 9 8 9 6.895 9 6 9.895 6 11 6 12.105 6.895 13 8 13Z", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" })] }));
    }
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsxs)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: [(0, jsx_runtime_1.jsx)("path", { d: "M2 21V3M2 5H20C20.53 5 21.039 5.211 21.414 5.586 21.789 5.961 22 6.47 22 7V15C22 15.53 21.789 16.039 21.414 16.414 21.039 16.789 20.53 17 20 17H2.26M7 17V20C7 20.265 7.105 20.52 7.293 20.707 7.48 20.895 7.735 21 8 21H13C13.265 21 13.52 20.895 13.707 20.707 13.895 20.52 14 20.265 14 20V17", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }), (0, jsx_runtime_1.jsx)("path", { d: "M16 13C17.105 13 18 12.105 18 11 18 9.895 17.105 9 16 9 14.895 9 14 9.895 14 11 14 12.105 14.895 13 16 13ZM8 13C9.105 13 10 12.105 10 11 10 9.895 9.105 9 8 9 6.895 9 6 9.895 6 11 6 12.105 6.895 13 8 13Z", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" })] }));
    }
    console.error(`Gpu doesn't support ${type}`);
    return null;
});
exports.Gpu.displayName = "Gpu";
exports.Gpu.metadata = {
    name: "Gpu",
    category: "stroke/gaming",
    tags: ["gpu", "icon"],
    description: "Gpu icon from stroke/gaming category",
    type: ["stroke", "icon"],
};
exports.default = exports.Gpu;
