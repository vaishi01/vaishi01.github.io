"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.IterationCcw = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = __importStar(require("react"));
exports.IterationCcw = React.forwardRef(function IterationCcw({ color = "currentColor", fill, size = 24, strokeWidth, strokeLinecap, strokeLinejoin, strokeDasharray, opacity, className, type = "stroke", ...props }, forwardedRef) {
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsxs)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: [(0, jsx_runtime_1.jsx)("path", { d: "M16 14L20 18L16 22", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }), (0, jsx_runtime_1.jsx)("path", { d: "M20 10C20 8.41775 19.5308 6.87103 18.6518 5.55544C17.7727 4.23985 16.5233 3.21447 15.0615 2.60897C13.5997 2.00347 11.9911 1.84504 10.4393 2.15372C8.88743 2.4624 7.46197 3.22433 6.34315 4.34315C5.22433 5.46197 4.4624 6.88743 4.15372 8.43928C3.84504 9.99113 4.00347 11.5997 4.60897 13.0615C5.21447 14.5233 6.23985 15.7727 7.55544 16.6518C8.87103 17.5308 10.4178 18 12 18H20", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" })] }));
    }
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsxs)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: [(0, jsx_runtime_1.jsx)("path", { d: "M16 14L20 18L16 22", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }), (0, jsx_runtime_1.jsx)("path", { d: "M20 10C20 8.41775 19.5308 6.87103 18.6518 5.55544C17.7727 4.23985 16.5233 3.21447 15.0615 2.60897C13.5997 2.00347 11.9911 1.84504 10.4393 2.15372C8.88743 2.4624 7.46197 3.22433 6.34315 4.34315C5.22433 5.46197 4.4624 6.88743 4.15372 8.43928C3.84504 9.99113 4.00347 11.5997 4.60897 13.0615C5.21447 14.5233 6.23985 15.7727 7.55544 16.6518C8.87103 17.5308 10.4178 18 12 18H20", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" })] }));
    }
    console.error(`IterationCcw doesn't support ${type}`);
    return null;
});
exports.IterationCcw.displayName = "IterationCcw";
exports.IterationCcw.metadata = {
    name: "IterationCcw",
    category: "stroke/design",
    tags: ["iteration", "ccw", "icon"],
    description: "IterationCcw icon from stroke/design category",
    type: ["stroke", "icon"],
};
exports.default = exports.IterationCcw;
