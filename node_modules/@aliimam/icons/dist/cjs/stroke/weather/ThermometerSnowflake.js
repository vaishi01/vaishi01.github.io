"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThermometerSnowflake = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = __importStar(require("react"));
exports.ThermometerSnowflake = React.forwardRef(function ThermometerSnowflake({ color = "currentColor", fill, size = 24, strokeWidth, strokeLinecap, strokeLinejoin, strokeDasharray, opacity, className, ...props }, forwardedRef) {
    return ((0, jsx_runtime_1.jsxs)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: [(0, jsx_runtime_1.jsx)("path", { d: "M10 20 8.75 17.5 6 18M10 4 8.75 6.5 6 6M10.585 15H10M2 12H8.5L10 9M20 14.54C20.763 14.98 21.359 15.66 21.696 16.473 22.033 17.287 22.092 18.189 21.864 19.039 21.636 19.89 21.134 20.642 20.435 21.178 19.737 21.714 18.881 22.004 18 22.004 17.12 22.004 16.264 21.714 15.565 21.178 14.866 20.642 14.364 19.89 14.136 19.039 13.908 18.189 13.968 17.287 14.305 16.473 14.642 15.66 15.237 14.98 16 14.54V4C16 3.47 16.211 2.961 16.586 2.586 16.961 2.211 17.47 2 18 2 18.53 2 19.039 2.211 19.414 2.586 19.789 2.961 20 3.47 20 4V14.54Z", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }), (0, jsx_runtime_1.jsx)("path", { d: "M4 10 5.5 12 4 14M7 21 10 15 8.5 12M7 3 10 9H12", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" })] }));
});
exports.ThermometerSnowflake.displayName = "ThermometerSnowflake";
exports.ThermometerSnowflake.metadata = {
    name: "ThermometerSnowflake",
    category: "stroke/weather",
    tags: ["thermometer", "snowflake", "icon"],
    description: "ThermometerSnowflake icon from stroke/weather category",
    type: ["stroke", "icon"],
};
exports.default = exports.ThermometerSnowflake;
