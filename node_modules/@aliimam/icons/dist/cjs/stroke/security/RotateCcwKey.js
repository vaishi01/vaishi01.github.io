"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RotateCcwKey = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = __importStar(require("react"));
exports.RotateCcwKey = React.forwardRef(function RotateCcwKey({ color = "currentColor", fill, size = 24, strokeWidth, strokeLinecap, strokeLinejoin, strokeDasharray, opacity, className, type = "stroke", ...props }, forwardedRef) {
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsxs)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: [(0, jsx_runtime_1.jsx)("path", { d: "M14.5 9.5 15.5 10.5M15.5 8.5 11.5 12.5M3 12C3 13.78 3.528 15.52 4.517 17 5.506 18.48 6.911 19.634 8.556 20.315 10.2 20.996 12.01 21.174 13.756 20.827 15.502 20.48 17.105 19.623 18.364 18.364 19.623 17.105 20.48 15.502 20.827 13.756 21.174 12.01 20.996 10.2 20.315 8.556 19.634 6.911 18.48 5.506 17 4.517 15.52 3.528 13.78 3 12 3 9.484 3.008 7.068 3.99 5.26 5.74L3 8", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }), (0, jsx_runtime_1.jsx)("path", { d: "M3 3V8H8M10 16C11.105 16 12 15.105 12 14 12 12.895 11.105 12 10 12 8.895 12 8 12.895 8 14 8 15.105 8.895 16 10 16Z", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" })] }));
    }
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsxs)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: [(0, jsx_runtime_1.jsx)("path", { d: "M14.5 9.5 15.5 10.5M15.5 8.5 11.5 12.5M3 12C3 13.78 3.528 15.52 4.517 17 5.506 18.48 6.911 19.634 8.556 20.315 10.2 20.996 12.01 21.174 13.756 20.827 15.502 20.48 17.105 19.623 18.364 18.364 19.623 17.105 20.48 15.502 20.827 13.756 21.174 12.01 20.996 10.2 20.315 8.556 19.634 6.911 18.48 5.506 17 4.517 15.52 3.528 13.78 3 12 3 9.484 3.008 7.068 3.99 5.26 5.74L3 8", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }), (0, jsx_runtime_1.jsx)("path", { d: "M3 3V8H8M10 16C11.105 16 12 15.105 12 14 12 12.895 11.105 12 10 12 8.895 12 8 12.895 8 14 8 15.105 8.895 16 10 16Z", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" })] }));
    }
    console.error(`RotateCcwKey doesn't support ${type}`);
    return null;
});
exports.RotateCcwKey.displayName = "RotateCcwKey";
exports.RotateCcwKey.metadata = {
    name: "RotateCcwKey",
    category: "stroke/security",
    tags: ["rotate", "ccw", "key", "icon"],
    description: "RotateCcwKey icon from stroke/security category",
    type: ["stroke", "icon"],
};
exports.default = exports.RotateCcwKey;
