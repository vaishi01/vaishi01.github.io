"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaneTakeoff = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = __importStar(require("react"));
exports.PlaneTakeoff = React.forwardRef(function PlaneTakeoff({ color = "currentColor", fill, size = 24, strokeWidth, strokeLinecap, strokeLinejoin, strokeDasharray, opacity, className, type = "stroke", ...props }, forwardedRef) {
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsx)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: (0, jsx_runtime_1.jsx)("path", { d: "M2 22H22M6.36 17.4 4 17 2 13 3.1 12.45C3.379 12.309 3.687 12.236 4 12.236 4.313 12.236 4.621 12.309 4.9 12.45L5.07 12.55C5.349 12.691 5.657 12.764 5.97 12.764 6.283 12.764 6.591 12.691 6.87 12.55L8 12 5 6 5.9 5.55C6.233 5.386 6.604 5.318 6.973 5.354 7.342 5.389 7.694 5.526 7.99 5.75L12.01 8.75C12.307 8.976 12.66 9.114 13.032 9.149 13.403 9.185 13.776 9.116 14.11 8.95L18.3 6.89C18.835 6.62 19.452 6.559 20.03 6.72L21 7C21.2 7.056 21.386 7.155 21.543 7.292 21.7 7.428 21.825 7.598 21.908 7.788 21.992 7.979 22.031 8.185 22.025 8.393 22.018 8.601 21.965 8.805 21.87 8.99L21.49 9.75C21.26 10.21 20.89 10.59 20.42 10.83L7.58 17.2C7.202 17.387 6.775 17.45 6.36 17.38V17.4Z", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }) }));
    }
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsx)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: (0, jsx_runtime_1.jsx)("path", { d: "M2 22H22M6.36 17.4 4 17 2 13 3.1 12.45C3.379 12.309 3.687 12.236 4 12.236 4.313 12.236 4.621 12.309 4.9 12.45L5.07 12.55C5.349 12.691 5.657 12.764 5.97 12.764 6.283 12.764 6.591 12.691 6.87 12.55L8 12 5 6 5.9 5.55C6.233 5.386 6.604 5.318 6.973 5.354 7.342 5.389 7.694 5.526 7.99 5.75L12.01 8.75C12.307 8.976 12.66 9.114 13.032 9.149 13.403 9.185 13.776 9.116 14.11 8.95L18.3 6.89C18.835 6.62 19.452 6.559 20.03 6.72L21 7C21.2 7.056 21.386 7.155 21.543 7.292 21.7 7.428 21.825 7.598 21.908 7.788 21.992 7.979 22.031 8.185 22.025 8.393 22.018 8.601 21.965 8.805 21.87 8.99L21.49 9.75C21.26 10.21 20.89 10.59 20.42 10.83L7.58 17.2C7.202 17.387 6.775 17.45 6.36 17.38V17.4Z", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }) }));
    }
    console.error(`PlaneTakeoff doesn't support ${type}`);
    return null;
});
exports.PlaneTakeoff.displayName = "PlaneTakeoff";
exports.PlaneTakeoff.metadata = {
    name: "PlaneTakeoff",
    category: "stroke/transportation",
    tags: ["plane", "takeoff", "icon"],
    description: "PlaneTakeoff icon from stroke/transportation category",
    type: ["stroke", "icon"],
};
exports.default = exports.PlaneTakeoff;
