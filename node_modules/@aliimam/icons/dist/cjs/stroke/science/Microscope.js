"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Microscope = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = __importStar(require("react"));
exports.Microscope = React.forwardRef(function Microscope({ color = "currentColor", fill, size = 24, strokeWidth, strokeLinecap, strokeLinejoin, strokeDasharray, opacity, className, type = "stroke", ...props }, forwardedRef) {
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsx)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: (0, jsx_runtime_1.jsx)("path", { d: "M6 18H14M3 22H21M14 22C15.857 22 17.637 21.263 18.95 19.95 20.263 18.637 21 16.857 21 15 21 13.144 20.263 11.363 18.95 10.05 17.637 8.738 15.857 8 14 8H13M9 14H11M9 12C8.47 12 7.961 11.789 7.586 11.414 7.211 11.039 7 10.53 7 10V6H13V10C13 10.53 12.789 11.039 12.414 11.414 12.039 11.789 11.53 12 11 12H9ZM12 6V3C12 2.735 11.895 2.48 11.707 2.293 11.52 2.105 11.265 2 11 2H9C8.735 2 8.48 2.105 8.293 2.293 8.105 2.48 8 2.735 8 3V6", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }) }));
    }
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsx)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: (0, jsx_runtime_1.jsx)("path", { d: "M6 18H14M3 22H21M14 22C15.857 22 17.637 21.263 18.95 19.95 20.263 18.637 21 16.857 21 15 21 13.144 20.263 11.363 18.95 10.05 17.637 8.738 15.857 8 14 8H13M9 14H11M9 12C8.47 12 7.961 11.789 7.586 11.414 7.211 11.039 7 10.53 7 10V6H13V10C13 10.53 12.789 11.039 12.414 11.414 12.039 11.789 11.53 12 11 12H9ZM12 6V3C12 2.735 11.895 2.48 11.707 2.293 11.52 2.105 11.265 2 11 2H9C8.735 2 8.48 2.105 8.293 2.293 8.105 2.48 8 2.735 8 3V6", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }) }));
    }
    console.error(`Microscope doesn't support ${type}`);
    return null;
});
exports.Microscope.displayName = "Microscope";
exports.Microscope.metadata = {
    name: "Microscope",
    category: "stroke/science",
    tags: ["microscope", "icon"],
    description: "Microscope icon from stroke/science category",
    type: ["stroke", "icon"],
};
exports.default = exports.Microscope;
