"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pyramid = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = __importStar(require("react"));
exports.Pyramid = React.forwardRef(function Pyramid({ color = "currentColor", fill, size = 24, strokeWidth, strokeLinecap, strokeLinejoin, strokeDasharray, opacity, className, type = "stroke", ...props }, forwardedRef) {
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsx)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: (0, jsx_runtime_1.jsx)("path", { d: "M2.5 16.88C2.381 16.811 2.278 16.718 2.197 16.607 2.115 16.496 2.058 16.369 2.028 16.235 1.998 16.101 1.996 15.962 2.022 15.827 2.048 15.692 2.102 15.563 2.18 15.45L11.18 2.43C11.272 2.298 11.395 2.19 11.537 2.116 11.68 2.041 11.839 2.002 12 2.002 12.161 2.002 12.319 2.041 12.462 2.116 12.605 2.19 12.728 2.298 12.82 2.43L21.82 15.44C21.899 15.554 21.954 15.683 21.981 15.819 22.008 15.955 22.007 16.095 21.977 16.23 21.947 16.366 21.889 16.494 21.807 16.605 21.725 16.717 21.62 16.811 21.5 16.88L12.99 21.74C12.688 21.912 12.347 22.002 12 22.002 11.653 22.002 11.311 21.912 11.01 21.74L2.5 16.88ZM12 2V22", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }) }));
    }
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsx)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: (0, jsx_runtime_1.jsx)("path", { d: "M2.5 16.88C2.381 16.811 2.278 16.718 2.197 16.607 2.115 16.496 2.058 16.369 2.028 16.235 1.998 16.101 1.996 15.962 2.022 15.827 2.048 15.692 2.102 15.563 2.18 15.45L11.18 2.43C11.272 2.298 11.395 2.19 11.537 2.116 11.68 2.041 11.839 2.002 12 2.002 12.161 2.002 12.319 2.041 12.462 2.116 12.605 2.19 12.728 2.298 12.82 2.43L21.82 15.44C21.899 15.554 21.954 15.683 21.981 15.819 22.008 15.955 22.007 16.095 21.977 16.231 21.947 16.366 21.889 16.494 21.807 16.605 21.725 16.717 21.62 16.811 21.5 16.88L12.99 21.74C12.688 21.912 12.347 22.002 12 22.002 11.653 22.002 11.311 21.912 11.01 21.74L2.5 16.88ZM12 2V22", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }) }));
    }
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsx)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: (0, jsx_runtime_1.jsx)("path", { d: "M2.5 16.88C2.381 16.811 2.278 16.718 2.197 16.607 2.116 16.496 2.058 16.369 2.028 16.235 1.998 16.101 1.996 15.962 2.022 15.827 2.048 15.692 2.102 15.563 2.18 15.45L11.18 2.43C11.272 2.298 11.395 2.19 11.538 2.116 11.68 2.041 11.839 2.002 12 2.002 12.161 2.002 12.32 2.041 12.462 2.116 12.605 2.19 12.728 2.298 12.82 2.43L21.82 15.44C21.9 15.554 21.955 15.683 21.982 15.819 22.009 15.955 22.007 16.095 21.977 16.231 21.947 16.366 21.889 16.494 21.807 16.605 21.725 16.717 21.62 16.811 21.5 16.88L12.99 21.74C12.688 21.912 12.347 22.002 12 22.002 11.653 22.002 11.312 21.912 11.01 21.74L2.5 16.88ZM12 2V22", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }) }));
    }
    console.error(`Pyramid doesn't support ${type}`);
    return null;
});
exports.Pyramid.displayName = "Pyramid";
exports.Pyramid.metadata = {
    name: "Pyramid",
    category: "stroke/shapes",
    tags: ["pyramid", "icon"],
    description: "Pyramid icon from stroke/shapes category",
    type: ["stroke", "icon"],
};
exports.default = exports.Pyramid;
