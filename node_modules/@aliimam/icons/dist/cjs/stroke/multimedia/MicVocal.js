"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MicVocal = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = __importStar(require("react"));
exports.MicVocal = React.forwardRef(function MicVocal({ color = "currentColor", fill, size = 24, strokeWidth, strokeLinecap, strokeLinejoin, strokeDasharray, opacity, className, type = "stroke", ...props }, forwardedRef) {
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsxs)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: [(0, jsx_runtime_1.jsx)("path", { d: "M11.0001 7.60101L5.00609 15.791C4.86505 15.9837 4.7976 16.2204 4.81594 16.4585C4.83429 16.6966 4.9372 16.9202 5.10609 17.089L5.92309 17.907C6.09444 18.0782 6.32208 18.1813 6.56375 18.1973C6.80541 18.2133 7.04467 18.1411 7.23709 17.994L15.0901 12", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }), (0, jsx_runtime_1.jsx)("path", { d: "M16.5 21.174C15.5 20.5 14.372 20 13 20 10.942 20 9.072 22.356 7 22 4.928 21.644 4.225 18.631 5.5 17.5M16 12C18.761 12 21 9.761 21 7 21 4.239 18.761 2 16 2 13.239 2 11 4.239 11 7 11 9.761 13.239 12 16 12Z", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" })] }));
    }
    if (type === "stroke") {
        return ((0, jsx_runtime_1.jsxs)("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: [(0, jsx_runtime_1.jsx)("path", { d: "M11.0001 7.60095L5.00609 15.791C4.86505 15.9836 4.7976 16.2204 4.81594 16.4585C4.83429 16.6965 4.9372 16.9202 5.10609 17.089L5.92309 17.907C6.09444 18.0781 6.32208 18.1813 6.56375 18.1973C6.80541 18.2133 7.04467 18.141 7.23709 17.994L15.0901 12", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }), (0, jsx_runtime_1.jsx)("path", { d: "M16.5 21.174C15.5 20.5 14.372 20 13 20 10.942 20 9.072 22.356 7 22 4.928 21.644 4.225 18.631 5.5 17.5M16 12C18.761 12 21 9.761 21 7 21 4.239 18.761 2 16 2 13.239 2 11 4.239 11 7 11 9.761 13.239 12 16 12Z", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" })] }));
    }
    console.error(`MicVocal doesn't support ${type}`);
    return null;
});
exports.MicVocal.displayName = "MicVocal";
exports.MicVocal.metadata = {
    name: "MicVocal",
    category: "stroke/multimedia",
    tags: ["mic", "vocal", "icon"],
    description: "MicVocal icon from stroke/multimedia category",
    type: ["stroke", "icon"],
};
exports.default = exports.MicVocal;
