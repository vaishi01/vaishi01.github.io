import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as React from "react";
export const Brush = React.forwardRef(function Brush({ color = "currentColor", fill, size = 24, strokeWidth, strokeLinecap, strokeLinejoin, strokeDasharray, opacity, className, type = "stroke", ...props }, forwardedRef) {
    if (type === "stroke") {
        return (_jsxs("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: [_jsx("path", { d: "M11 10 14 13M6.5 21C7.192 21 7.869 20.795 8.444 20.41 9.02 20.026 9.469 19.479 9.733 18.839 9.998 18.2 10.068 17.496 9.933 16.817 9.798 16.138 9.464 15.515 8.975 15.025 8.485 14.536 7.862 14.202 7.183 14.067 6.504 13.932 5.8 14.002 5.16 14.266 4.521 14.531 3.974 14.98 3.59 15.556 3.205 16.131 3 16.808 3 17.5 3 18.166 2.747 18.806 2.292 19.292 2.152 19.432 2.056 19.61 2.017 19.804 1.979 19.999 1.998 20.2 2.074 20.383 2.15 20.566 2.279 20.722 2.443 20.832 2.608 20.942 2.802 21 3 21H6.5Z", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }), _jsx("path", { d: "M9.9688 17.031L21.3778 5.62398C21.7759 5.22589 21.9995 4.68596 21.9995 4.12298C21.9995 3.55999 21.7759 3.02007 21.3778 2.62198C20.9797 2.22389 20.4398 2.00024 19.8768 2.00024C19.3138 2.00024 18.7739 2.22389 18.3758 2.62198L6.9668 14.031", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" })] }));
    }
    if (type === "stroke") {
        return (_jsxs("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: [_jsx("path", { d: "M11 10 14 13M6.5 21C7.192 21 7.869 20.795 8.445 20.41 9.02 20.026 9.469 19.479 9.734 18.839 9.999 18.2 10.068 17.496 9.933 16.817 9.798 16.138 9.464 15.515 8.975 15.025 8.485 14.536 7.862 14.202 7.183 14.067 6.504 13.932 5.8 14.002 5.161 14.266 4.521 14.531 3.975 14.98 3.59 15.556 3.205 16.131 3 16.808 3 17.5 3 18.166 2.747 18.806 2.292 19.292 2.152 19.432 2.056 19.61 2.018 19.804 1.979 19.999 1.999 20.2 2.075 20.383 2.15 20.566 2.279 20.722 2.444 20.832 2.608 20.942 2.802 21 3 21H6.5Z", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }), _jsx("path", { d: "M9.96904 17.031L21.378 5.62398C21.7761 5.22589 21.9998 4.68596 21.9998 4.12298C21.9998 3.55999 21.7761 3.02007 21.378 2.62198C20.98 2.22389 20.44 2.00024 19.877 2.00024C19.3141 2.00024 18.7741 2.22389 18.376 2.62198L6.96704 14.031", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" })] }));
    }
    if (type === "stroke") {
        return (_jsxs("svg", { width: size, height: size, viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: className, strokeWidth: strokeWidth, strokeLinecap: strokeLinecap, strokeLinejoin: strokeLinejoin, strokeDasharray: strokeDasharray, opacity: opacity, ...props, ref: forwardedRef, children: [_jsx("path", { d: "M11 10 14 13M6.5 21C7.192 21 7.869 20.795 8.445 20.41 9.02 20.026 9.469 19.479 9.734 18.839 9.999 18.2 10.068 17.496 9.933 16.817 9.798 16.138 9.464 15.515 8.975 15.025 8.485 14.536 7.862 14.202 7.183 14.067 6.504 13.932 5.8 14.002 5.161 14.266 4.521 14.531 3.975 14.98 3.59 15.556 3.205 16.131 3 16.808 3 17.5 3 18.166 2.747 18.806 2.292 19.292 2.152 19.432 2.056 19.61 2.018 19.804 1.979 19.999 1.999 20.2 2.075 20.383 2.15 20.566 2.279 20.722 2.444 20.832 2.608 20.942 2.802 21 3 21H6.5Z", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" }), _jsx("path", { d: "M9.96904 17.031L21.378 5.62398C21.7761 5.22589 21.9998 4.68596 21.9998 4.12298C21.9998 3.55999 21.7761 3.02007 21.378 2.62198C20.98 2.22389 20.44 2.00024 19.877 2.00024C19.3141 2.00024 18.7741 2.22389 18.376 2.62198L6.96704 14.031", stroke: color, strokeLinecap: "round", strokeLinejoin: "round" })] }));
    }
    console.error(`Brush doesn't support ${type}`);
    return null;
});
Brush.displayName = "Brush";
Brush.metadata = {
    name: "Brush",
    category: "stroke/tools",
    tags: ["brush", "icon"],
    description: "Brush icon from stroke/tools category",
    type: ["stroke", "icon"],
};
export default Brush;
