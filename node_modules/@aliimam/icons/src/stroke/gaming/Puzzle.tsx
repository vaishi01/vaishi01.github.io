import * as React from "react";
import type { IconProps, IconMetadata, IconComponent } from "../../types";

interface PuzzleProps extends IconProps {
  type?: "stroke";
}

export const Puzzle: IconComponent<PuzzleProps> = React.forwardRef<
  SVGSVGElement,
  PuzzleProps
>(function Puzzle(
  {
    color = "currentColor",
    fill,
    size = 24,
    strokeWidth,
    strokeLinecap,
    strokeLinejoin,
    strokeDasharray,
    opacity,
    className,
    type = "stroke",
    ...props
  },
  forwardedRef,
) {
  if (type === "stroke") {
    return (
      <svg
        width={size}
        height={size}
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        className={className}
        strokeWidth={strokeWidth}
        strokeLinecap={strokeLinecap}
        strokeLinejoin={strokeLinejoin}
        strokeDasharray={strokeDasharray}
        opacity={opacity}
        {...props}
        ref={forwardedRef}
      >
        <path
          d="M15.39 4.39003C15.5157 4.51586 15.6727 4.60588 15.8448 4.65083C16.0169 4.69577 16.1978 4.694 16.369 4.6457C16.5402 4.59741 16.6954 4.50433 16.8186 4.37607C16.9418 4.24781 17.0286 4.089 17.07 3.91603C17.1738 3.48393 17.3909 3.0873 17.699 2.767C18.007 2.44671 18.3949 2.21431 18.8226 2.09375C19.2503 1.97319 19.7025 1.96882 20.1324 2.0811C20.5624 2.19337 20.9547 2.41823 21.2689 2.73252C21.5831 3.04681 21.8078 3.43916 21.9199 3.86918C22.0321 4.29919 22.0275 4.75133 21.9068 5.17902C21.7861 5.60671 21.5536 5.99449 21.2332 6.30244C20.9128 6.61039 20.5161 6.82737 20.084 6.93103C19.911 6.97242 19.7522 7.05921 19.6239 7.18243C19.4957 7.30565 19.4026 7.46084 19.3543 7.63202C19.306 7.8032 19.3042 7.98416 19.3492 8.15625C19.3941 8.32834 19.4842 8.48533 19.61 8.61103L21.293 10.293C21.5172 10.5172 21.695 10.7833 21.8163 11.0762C21.9376 11.3691 22.0001 11.683 22.0001 12C22.0001 12.317 21.9376 12.631 21.8163 12.9239C21.695 13.2167 21.5172 13.4829 21.293 13.707L19.61 15.39C19.4843 15.5159 19.3273 15.6059 19.1552 15.6508C18.9831 15.6958 18.8022 15.694 18.631 15.6457C18.4598 15.5974 18.3046 15.5043 18.1814 15.3761C18.0582 15.2478 17.9714 15.089 17.93 14.916C17.8262 14.4839 17.6091 14.0873 17.301 13.767C16.993 13.4467 16.6051 13.2143 16.1774 13.0938C15.7496 12.9732 15.2975 12.9688 14.8675 13.0811C14.4375 13.1934 14.0453 13.4182 13.7311 13.7325C13.4169 14.0468 13.1922 14.4392 13.08 14.8692C12.9679 15.2992 12.9724 15.7513 13.0931 16.179C13.2138 16.6067 13.4464 16.9945 13.7668 17.3024C14.0872 17.6104 14.4838 17.8274 14.916 17.931C15.089 17.9724 15.2478 18.0592 15.376 18.1824C15.5043 18.3056 15.5974 18.4608 15.6457 18.632C15.694 18.8032 15.6957 18.9842 15.6508 19.1562C15.6058 19.3283 15.5158 19.4853 15.39 19.611L13.707 21.293C13.4828 21.5172 13.2167 21.695 12.9238 21.8163C12.6309 21.9377 12.317 22.0001 12 22.0001C11.683 22.0001 11.369 21.9377 11.0762 21.8163C10.7833 21.695 10.5171 21.5172 10.293 21.293L8.60999 19.61C8.48428 19.4842 8.32729 19.3942 8.15521 19.3492C7.98312 19.3043 7.80216 19.3061 7.63098 19.3543C7.4598 19.4026 7.3046 19.4957 7.18138 19.624C7.05816 19.7522 6.97138 19.9111 6.92999 20.084C6.82618 20.5161 6.60907 20.9128 6.30102 21.233C5.99297 21.5533 5.6051 21.7857 5.17737 21.9063C4.74964 22.0269 4.29751 22.0312 3.86753 21.919C3.43755 21.8067 3.04527 21.5818 2.73109 21.2675C2.4169 20.9532 2.19217 20.5609 2.08004 20.1309C1.96791 19.7009 1.97242 19.2487 2.09313 18.821C2.21383 18.3933 2.44635 18.0056 2.76675 17.6976C3.08715 17.3897 3.48385 17.1727 3.91599 17.069C4.08896 17.0276 4.24777 16.9408 4.37603 16.8176C4.50429 16.6944 4.59737 16.5392 4.64566 16.368C4.69396 16.1969 4.69573 16.0159 4.65078 15.8438C4.60584 15.6717 4.51581 15.5147 4.38999 15.389L2.70699 13.707C2.48281 13.4829 2.30499 13.2167 2.18366 12.9239C2.06234 12.631 1.9999 12.317 1.9999 12C1.9999 11.683 2.06234 11.3691 2.18366 11.0762C2.30499 10.7833 2.48281 10.5172 2.70699 10.293L4.38999 8.61003C4.51569 8.4842 4.67268 8.39417 4.84476 8.34923C5.01685 8.30429 5.19781 8.30605 5.36899 8.35435C5.54017 8.40265 5.69537 8.49572 5.81859 8.62399C5.94181 8.75225 6.02859 8.91105 6.06999 9.08403C6.17379 9.51613 6.3909 9.91275 6.69895 10.2331C7.00701 10.5533 7.39487 10.7857 7.8226 10.9063C8.25033 11.0269 8.70246 11.0312 9.13244 10.919C9.56242 10.8067 9.9547 10.5818 10.2689 10.2675C10.5831 9.95325 10.8078 9.56089 10.9199 9.13088C11.0321 8.70086 11.0275 8.24873 10.9068 7.82104C10.7861 7.39335 10.5536 7.00556 10.2332 6.69761C9.91282 6.38967 9.51612 6.17269 9.08399 6.06903C8.91101 6.02763 8.75221 5.94085 8.62394 5.81763C8.49568 5.69441 8.40261 5.53921 8.35431 5.36803C8.30601 5.19686 8.30424 5.01589 8.34919 4.84381C8.39413 4.67172 8.48416 4.51473 8.60999 4.38903L10.293 2.70703C10.5171 2.48285 10.7833 2.30503 11.0762 2.18371C11.369 2.06238 11.683 1.99994 12 1.99994C12.317 1.99994 12.6309 2.06238 12.9238 2.18371C13.2167 2.30503 13.4828 2.48285 13.707 2.70703L15.39 4.39003Z"
          stroke={color}
          strokeLinecap="round"
          strokeLinejoin="round"
        />
      </svg>
    );
  }

  if (type === "stroke") {
    return (
      <svg
        width={size}
        height={size}
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        className={className}
        strokeWidth={strokeWidth}
        strokeLinecap={strokeLinecap}
        strokeLinejoin={strokeLinejoin}
        strokeDasharray={strokeDasharray}
        opacity={opacity}
        {...props}
        ref={forwardedRef}
      >
        <path
          d="M15.3901 4.38997C15.5158 4.5158 15.6728 4.60582 15.8449 4.65077C16.017 4.69571 16.1979 4.69394 16.3691 4.64564C16.5403 4.59735 16.6955 4.50427 16.8187 4.37601C16.9419 4.24775 17.0287 4.08894 17.0701 3.91597C17.1739 3.48386 17.391 3.08724 17.6991 2.76694C18.0071 2.44665 18.395 2.21425 18.8227 2.09369C19.2504 1.97313 19.7026 1.96876 20.1326 2.08104C20.5625 2.19331 20.9548 2.41817 21.269 2.73246C21.5832 3.04675 21.8079 3.4391 21.9201 3.86912C22.0322 4.29913 22.0277 4.75127 21.907 5.17896C21.7863 5.60665 21.5537 5.99443 21.2333 6.30238C20.9129 6.61033 20.5162 6.8273 20.0841 6.93097C19.9111 6.97236 19.7523 7.05915 19.6241 7.18237C19.4958 7.30559 19.4027 7.46078 19.3544 7.63196C19.3061 7.80314 19.3044 7.9841 19.3493 8.15619C19.3943 8.32828 19.4843 8.48526 19.6101 8.61097L21.2931 10.293C21.5173 10.5171 21.6951 10.7833 21.8164 11.0761C21.9378 11.369 22.0002 11.6829 22.0002 12C22.0002 12.317 21.9378 12.6309 21.8164 12.9238C21.6951 13.2167 21.5173 13.4828 21.2931 13.707L19.6101 15.39C19.4844 15.5158 19.3274 15.6058 19.1553 15.6508C18.9832 15.6957 18.8023 15.6939 18.6311 15.6456C18.4599 15.5973 18.3047 15.5043 18.1815 15.376C18.0583 15.2477 17.9715 15.0889 17.9301 14.916C17.8263 14.4839 17.6092 14.0872 17.3011 13.7669C16.9931 13.4466 16.6052 13.2142 16.1775 13.0937C15.7498 12.9731 15.2976 12.9688 14.8677 13.081C14.4377 13.1933 14.0454 13.4182 13.7312 13.7325C13.417 14.0467 13.1923 14.4391 13.0802 14.8691C12.968 15.2991 12.9725 15.7513 13.0932 16.179C13.214 16.6066 13.4465 16.9944 13.7669 17.3024C14.0873 17.6103 14.484 17.8273 14.9161 17.931C15.0891 17.9724 15.2479 18.0591 15.3761 18.1824C15.5044 18.3056 15.5975 18.4608 15.6458 18.632C15.6941 18.8031 15.6958 18.9841 15.6509 19.1562C15.606 19.3283 15.5159 19.4853 15.3901 19.611L13.7071 21.293C13.4829 21.5171 13.2168 21.695 12.9239 21.8163C12.631 21.9376 12.3171 22.0001 12.0001 22.0001C11.6831 22.0001 11.3692 21.9376 11.0763 21.8163C10.7834 21.695 10.5173 21.5171 10.2931 21.293L8.61011 19.61C8.4844 19.4841 8.32742 19.3941 8.15533 19.3492C7.98324 19.3042 7.80228 19.306 7.6311 19.3543C7.45993 19.4026 7.30473 19.4957 7.18151 19.6239C7.05829 19.7522 6.9715 19.911 6.93011 20.084C6.8263 20.5161 6.60919 20.9127 6.30114 21.233C5.99309 21.5533 5.60522 21.7857 5.17749 21.9062C4.74976 22.0268 4.29763 22.0312 3.86765 21.9189C3.43767 21.8066 3.04539 21.5818 2.73121 21.2675C2.41702 20.9532 2.19229 20.5608 2.08016 20.1308C1.96803 19.7008 1.97255 19.2487 2.09325 18.821C2.21395 18.3933 2.44648 18.0055 2.76688 17.6976C3.08728 17.3896 3.48397 17.1726 3.91611 17.069C4.08908 17.0276 4.24789 16.9408 4.37615 16.8176C4.50441 16.6943 4.59749 16.5391 4.64578 16.368C4.69408 16.1968 4.69585 16.0158 4.65091 15.8437C4.60596 15.6717 4.51594 15.5147 4.39011 15.389L2.70711 13.707C2.48293 13.4828 2.30511 13.2167 2.18379 12.9238C2.06246 12.6309 2.00002 12.317 2.00002 12C2.00002 11.6829 2.06246 11.369 2.18379 11.0761C2.30511 10.7833 2.48293 10.5171 2.70711 10.293L4.39011 8.60997C4.51581 8.48414 4.6728 8.39411 4.84489 8.34917C5.01697 8.30423 5.19794 8.30599 5.36911 8.35429C5.54029 8.40259 5.69549 8.49566 5.81871 8.62393C5.94193 8.75219 6.02871 8.91099 6.07011 9.08397C6.17391 9.51607 6.39102 9.91269 6.69907 10.233C7.00713 10.5533 7.39499 10.7857 7.82272 10.9062C8.25045 11.0268 8.70259 11.0312 9.13257 10.9189C9.56254 10.8066 9.95482 10.5818 10.269 10.2675C10.5832 9.95319 10.8079 9.56083 10.9201 9.13082C11.0322 8.7008 11.0277 8.24867 10.907 7.82098C10.7863 7.39329 10.5537 7.0055 10.2333 6.69755C9.91294 6.3896 9.51624 6.17263 9.08411 6.06897C8.91113 6.02757 8.75233 5.94079 8.62407 5.81757C8.4958 5.69435 8.40273 5.53915 8.35443 5.36797C8.30613 5.19679 8.30437 5.01583 8.34931 4.84374C8.39425 4.67166 8.48428 4.51467 8.61011 4.38897L10.2931 2.70697C10.5173 2.48279 10.7834 2.30497 11.0763 2.18364C11.3692 2.06232 11.6831 1.99988 12.0001 1.99988C12.3171 1.99988 12.631 2.06232 12.9239 2.18364C13.2168 2.30497 13.4829 2.48279 13.7071 2.70697L15.3901 4.38997Z"
          stroke={color}
          strokeLinecap="round"
          strokeLinejoin="round"
        />
      </svg>
    );
  }

  console.error(`Puzzle doesn't support ${type}`);
  return null;
});

Puzzle.displayName = "Puzzle";

Puzzle.metadata = {
  name: "Puzzle",
  category: "stroke/gaming",
  tags: ["puzzle", "icon"],
  description: "Puzzle icon from stroke/gaming category",
  type: ["stroke", "icon"],
} as IconMetadata;

export default Puzzle;
