import * as React from "react";
import type { IconProps, IconMetadata, IconComponent } from "../../types";

interface BadgeQuestionMarkProps extends IconProps {
  type?: "solid" | "stroke";
}

export const BadgeQuestionMark: IconComponent<BadgeQuestionMarkProps> =
  React.forwardRef<SVGSVGElement, BadgeQuestionMarkProps>(
    function BadgeQuestionMark(
      {
        color = "currentColor",
        fill,
        size = 24,
        strokeWidth,
        strokeLinecap,
        strokeLinejoin,
        strokeDasharray,
        opacity,
        className,
        type = "stroke",
        ...props
      },
      forwardedRef,
    ) {
      if (type === "solid") {
        return (
          <svg
            width={size}
            height={size}
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            className={className}
            strokeWidth={strokeWidth}
            strokeLinecap={strokeLinecap}
            strokeLinejoin={strokeLinejoin}
            strokeDasharray={strokeDasharray}
            opacity={opacity}
            {...props}
            ref={forwardedRef}
          >
            <path
              d="M12 2.00488C12.6714 2.00488 13.332 2.17369 13.9209 2.49609C14.5098 2.81853 15.0084 3.284 15.3701 3.84961C16.0282 3.70168 16.7135 3.72335 17.3613 3.91113C18.0091 4.09897 18.5993 4.44692 19.0762 4.92383C19.5531 5.40074 19.901 5.9909 20.0889 6.63867C20.2767 7.28654 20.2983 7.97177 20.1504 8.62988C20.716 8.99158 21.1815 9.49024 21.5039 10.0791C21.8263 10.668 21.9951 11.3286 21.9951 12C21.9951 12.6714 21.8263 13.332 21.5039 13.9209C21.1815 14.5098 20.716 15.0084 20.1504 15.3701C20.2976 16.0271 20.2761 16.7107 20.0889 17.3574C19.9015 18.0043 19.5538 18.5936 19.0781 19.0703C18.6024 19.547 18.0137 19.8963 17.3672 20.085C16.7208 20.2735 16.0372 20.2963 15.3799 20.1504C15.0187 20.7181 14.5195 21.1859 13.9297 21.5098C13.3399 21.8335 12.6777 22.0029 12.0049 22.0029C11.332 22.0029 10.6699 21.8335 10.0801 21.5098C9.49021 21.1859 8.99111 20.7181 8.62988 20.1504C7.97288 20.2977 7.28932 20.2761 6.64258 20.0889C5.9957 19.9015 5.4064 19.5538 4.92969 19.0781C4.45297 18.6024 4.10374 18.0137 3.91504 17.3672C3.72645 16.7208 3.70368 16.0372 3.84961 15.3799C3.27971 15.0191 2.81066 14.5196 2.48535 13.9287C2.16007 13.3378 1.98926 12.6745 1.98926 12C1.98926 11.3254 2.15999 10.6613 2.48535 10.0703C2.81064 9.47968 3.27987 8.98076 3.84961 8.62012C3.70365 7.96264 3.72634 7.27834 3.91504 6.63184C4.10377 5.98549 4.45307 5.3975 4.92969 4.92188C5.4064 4.44616 5.99569 4.09848 6.64258 3.91113C7.28932 3.72388 7.97288 3.70234 8.62988 3.84961C8.99158 3.28401 9.49023 2.81853 10.0791 2.49609C10.668 2.17369 11.3286 2.00488 12 2.00488ZM12 15.5C11.1716 15.5 10.5 16.1716 10.5 17C10.5 17.8284 11.1716 18.5 12 18.5H12.0098C12.8382 18.5 13.5098 17.8284 13.5098 17C13.5098 16.1716 12.8382 15.5 12.0098 15.5H12ZM12.6807 5.55957C11.6334 5.37999 10.5558 5.57686 9.63965 6.11523C8.72355 6.65363 8.0275 7.49961 7.6748 8.50195C7.40003 9.28327 7.81061 10.14 8.5918 10.415C9.37328 10.6899 10.23 10.2786 10.5049 9.49707C10.6225 9.16317 10.8549 8.88153 11.1602 8.70215C11.4654 8.5228 11.8248 8.4568 12.1738 8.5166C12.5227 8.57653 12.8394 8.75858 13.0674 9.0293C13.2953 9.3001 13.4203 9.64314 13.4199 9.99707V10C13.4197 10.2038 13.2468 10.5627 12.5879 11.002C12.3039 11.1913 12.0089 11.3394 11.7793 11.4414C11.6667 11.4915 11.5748 11.5279 11.5146 11.5508C11.4849 11.5621 11.4633 11.5699 11.4512 11.5742L11.4424 11.5771H11.4434C11.4419 11.5777 11.4409 11.578 11.4404 11.5781C10.658 11.842 10.2361 12.6896 10.4971 13.4736C10.759 14.2595 11.6086 14.6848 12.3945 14.4229L11.9199 13C12.362 14.3261 12.393 14.416 12.3955 14.4219L12.3984 14.4209C12.3998 14.4204 12.4016 14.4205 12.4033 14.4199C12.4069 14.4187 12.4111 14.4167 12.416 14.415C12.4264 14.4115 12.4401 14.407 12.4561 14.4014C12.4879 14.39 12.5309 14.3743 12.583 14.3545C12.6869 14.3149 12.8296 14.2575 12.998 14.1826C13.3309 14.0347 13.7862 13.8085 14.252 13.498C15.0663 12.9551 16.3374 11.8666 16.416 10.166L16.4199 10C16.421 8.93809 16.0462 7.90911 15.3623 7.09668C14.678 6.28405 13.7278 5.73918 12.6807 5.55957Z"
              fill="currentColor"
            />
          </svg>
        );
      }

      if (type === "stroke") {
        return (
          <svg
            width={size}
            height={size}
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            className={className}
            strokeWidth={strokeWidth}
            strokeLinecap={strokeLinecap}
            strokeLinejoin={strokeLinejoin}
            strokeDasharray={strokeDasharray}
            opacity={opacity}
            {...props}
            ref={forwardedRef}
          >
            <path
              d="M3.85019 8.6201C3.70423 7.96262 3.72665 7.27894 3.91535 6.63244C4.10405 5.98593 4.45294 5.39754 4.92966 4.92182C5.40638 4.4461 5.9955 4.09844 6.6424 3.91109C7.2893 3.72374 7.97303 3.70276 8.63019 3.8501C8.9919 3.2844 9.4902 2.81886 10.0791 2.49638C10.6681 2.17391 11.3287 2.00488 12.0002 2.00488C12.6716 2.00488 13.3323 2.17391 13.9212 2.49638C14.5102 2.81886 15.0085 3.2844 15.3702 3.8501C16.0284 3.70212 16.7133 3.72301 17.3612 3.91081C18.0091 4.09862 18.599 4.44724 19.076 4.92425C19.5531 5.40126 19.9017 5.99117 20.0895 6.6391C20.2773 7.28703 20.2982 7.97193 20.1502 8.6301C20.7159 8.99181 21.1814 9.4901 21.5039 10.079C21.8264 10.668 21.9954 11.3286 21.9954 12.0001C21.9954 12.6715 21.8264 13.3322 21.5039 13.9211C21.1814 14.5101 20.7159 15.0084 20.1502 15.3701C20.2975 16.0273 20.2765 16.711 20.0892 17.3579C19.9018 18.0048 19.5542 18.5939 19.0785 19.0706C18.6027 19.5473 18.0144 19.8962 17.3679 20.0849C16.7213 20.2736 16.0377 20.2961 15.3802 20.1501C15.019 20.718 14.5203 21.1855 13.9303 21.5094C13.3404 21.8333 12.6782 22.0032 12.0052 22.0032C11.3322 22.0032 10.67 21.8333 10.0801 21.5094C9.49011 21.1855 8.99143 20.718 8.63019 20.1501C7.97303 20.2974 7.2893 20.2765 6.6424 20.0891C5.9955 19.9018 5.40638 19.5541 4.92966 19.0784C4.45294 18.6027 4.10405 18.0143 3.91535 17.3678C3.72665 16.7213 3.70423 16.0376 3.85019 15.3801C3.28015 15.0193 2.81061 14.5203 2.48524 13.9293C2.15988 13.3384 1.98926 12.6747 1.98926 12.0001C1.98926 11.3255 2.15988 10.6618 2.48524 10.0709C2.81061 9.47992 3.28015 8.98085 3.85019 8.6201Z"
              stroke={color}
              strokeLinecap="round"
              strokeLinejoin="round"
            />
            <path
              d="M9.09 9C9.325 8.332 9.789 7.768 10.4 7.409 11.011 7.05 11.729 6.919 12.427 7.039 13.125 7.159 13.759 7.522 14.215 8.064 14.671 8.606 14.921 9.292 14.92 10 14.92 12 11.92 13 11.92 13M12 17H12.01"
              stroke={color}
              strokeLinecap="round"
              strokeLinejoin="round"
            />
          </svg>
        );
      }

      if (type === "stroke") {
        return (
          <svg
            width={size}
            height={size}
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            className={className}
            strokeWidth={strokeWidth}
            strokeLinecap={strokeLinecap}
            strokeLinejoin={strokeLinejoin}
            strokeDasharray={strokeDasharray}
            opacity={opacity}
            {...props}
            ref={forwardedRef}
          >
            <path
              d="M3.84995 8.61998C3.70399 7.9625 3.7264 7.27882 3.91511 6.63231C4.10381 5.98581 4.4527 5.39742 4.92942 4.9217C5.40614 4.44597 5.99526 4.09832 6.64216 3.91097C7.28905 3.72362 7.97278 3.70264 8.62995 3.84998C8.99166 3.28428 9.48995 2.81873 10.0789 2.49626C10.6678 2.17379 11.3285 2.00476 11.9999 2.00476C12.6714 2.00476 13.332 2.17379 13.921 2.49626C14.5099 2.81873 15.0082 3.28428 15.3699 3.84998C16.0281 3.702 16.713 3.72288 17.3609 3.91069C18.0089 4.09849 18.5988 4.44712 19.0758 4.92413C19.5528 5.40114 19.9014 5.99105 20.0892 6.63898C20.277 7.28691 20.2979 7.97181 20.1499 8.62998C20.7156 8.99168 21.1812 9.48998 21.5037 10.0789C21.8261 10.6679 21.9952 11.3285 21.9952 12C21.9952 12.6714 21.8261 13.3321 21.5037 13.921C21.1812 14.51 20.7156 15.0083 20.1499 15.37C20.2973 16.0271 20.2763 16.7109 20.089 17.3578C19.9016 18.0047 19.554 18.5938 19.0782 19.0705C18.6025 19.5472 18.0141 19.8961 17.3676 20.0848C16.7211 20.2735 16.0374 20.2959 15.3799 20.15C15.0187 20.7178 14.52 21.1854 13.9301 21.5093C13.3401 21.8332 12.678 22.003 12.0049 22.003C11.3319 22.003 10.6698 21.8332 10.0798 21.5093C9.48987 21.1854 8.99119 20.7178 8.62995 20.15C7.97278 20.2973 7.28905 20.2763 6.64216 20.089C5.99526 19.9016 5.40614 19.554 4.92942 19.0783C4.4527 18.6025 4.10381 18.0141 3.91511 17.3676C3.7264 16.7211 3.70399 16.0374 3.84995 15.38C3.27991 15.0192 2.81036 14.5201 2.485 13.9292C2.15963 13.3382 1.98901 12.6746 1.98901 12C1.98901 11.3254 2.15963 10.6617 2.485 10.0708C2.81036 9.4798 3.27991 8.98073 3.84995 8.61998Z"
              stroke={color}
              strokeLinecap="round"
              strokeLinejoin="round"
            />
            <path
              d="M9.09 9C9.325 8.332 9.789 7.768 10.4 7.409 11.011 7.05 11.729 6.919 12.427 7.039 13.126 7.158 13.759 7.521 14.215 8.063 14.671 8.605 14.921 9.291 14.92 10 14.92 12 11.92 13 11.92 13M12 17H12.01"
              stroke={color}
              strokeLinecap="round"
              strokeLinejoin="round"
            />
          </svg>
        );
      }

      if (type === "stroke") {
        return (
          <svg
            width={size}
            height={size}
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            className={className}
            strokeWidth={strokeWidth}
            strokeLinecap={strokeLinecap}
            strokeLinejoin={strokeLinejoin}
            strokeDasharray={strokeDasharray}
            opacity={opacity}
            {...props}
            ref={forwardedRef}
          >
            <path
              d="M3.85 8.6201C3.70404 7.96262 3.72646 7.27894 3.91516 6.63244C4.10386 5.98593 4.45275 5.39754 4.92947 4.92182C5.40619 4.4461 5.99531 4.09844 6.64221 3.91109C7.28911 3.72374 7.97284 3.70276 8.63 3.8501C8.99171 3.2844 9.49001 2.81886 10.079 2.49638C10.6679 2.17391 11.3285 2.00488 12 2.00488C12.6715 2.00488 13.3321 2.17391 13.9211 2.49638C14.51 2.81886 15.0083 3.2844 15.37 3.8501C16.0282 3.70212 16.7131 3.72301 17.361 3.91081C18.0089 4.09862 18.5988 4.44724 19.0758 4.92425C19.5529 5.40126 19.9015 5.99117 20.0893 6.6391C20.2771 7.28703 20.298 7.97193 20.15 8.6301C20.7157 8.99181 21.1812 9.4901 21.5037 10.079C21.8262 10.668 21.9952 11.3286 21.9952 12.0001C21.9952 12.6715 21.8262 13.3322 21.5037 13.9211C21.1812 14.5101 20.7157 15.0084 20.15 15.3701C20.2973 16.0273 20.2764 16.711 20.089 17.3579C19.9017 18.0048 19.554 18.5939 19.0783 19.0706C18.6026 19.5473 18.0142 19.8962 17.3677 20.0849C16.7212 20.2736 16.0375 20.2961 15.38 20.1501C15.0188 20.718 14.5201 21.1855 13.9301 21.5094C13.3402 21.8333 12.678 22.0032 12.005 22.0032C11.332 22.0032 10.6698 21.8333 10.0799 21.5094C9.48992 21.1855 8.99124 20.718 8.63 20.1501C7.97284 20.2974 7.28911 20.2765 6.64221 20.0891C5.99531 19.9018 5.40619 19.5541 4.92947 19.0784C4.45275 18.6027 4.10386 18.0143 3.91516 17.3678C3.72646 16.7213 3.70404 16.0376 3.85 15.3801C3.27996 15.0193 2.81042 14.5203 2.48505 13.9293C2.15969 13.3384 1.98907 12.6747 1.98907 12.0001C1.98907 11.3255 2.15969 10.6618 2.48505 10.0709C2.81042 9.47992 3.27996 8.98085 3.85 8.6201Z"
              stroke={color}
              strokeLinecap="round"
              strokeLinejoin="round"
            />
            <path
              d="M9.09 9C9.325 8.332 9.789 7.768 10.4 7.409 11.011 7.05 11.729 6.919 12.427 7.039 13.126 7.159 13.759 7.522 14.215 8.064 14.671 8.606 14.921 9.292 14.92 10 14.92 12 11.92 13 11.92 13M12 17H12.01"
              stroke={color}
              strokeLinecap="round"
              strokeLinejoin="round"
            />
          </svg>
        );
      }

      console.error(`BadgeQuestionMark doesn't support ${type}`);
      return null;
    },
  );

BadgeQuestionMark.displayName = "BadgeQuestionMark";

BadgeQuestionMark.metadata = {
  name: "BadgeQuestionMark",
  category: "solid/accessibility",
  tags: ["badge", "question", "mark", "icon"],
  description: "BadgeQuestionMark icon from solid/accessibility category",
  type: ["stroke", "icon"],
} as IconMetadata;

export default BadgeQuestionMark;
